/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package assistent;

import java.awt.Color;
import java.awt.Dimension;
import java.util.logging.Level;
import java.util.logging.Logger;

import database.DBmanager;
import gSpeech.Listener;
import gSpeech.Speaker;
import java.awt.GraphicsEnvironment;
import java.awt.Rectangle;
import java.io.IOException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Random;

public class AssistFrame extends javax.swing.JFrame {

    /**
     * Creates new form AssistFrame
     */
    private Color invisible = new Color(0, 0, 0, 0);

    private gSpeech.Listener listener;
    private gSpeech.Speaker speaker;
    private Thread actionThread;
    private Thread micButtionThread;
    private String cmdNotFoundReply[];       //This array stores reply to give when cmd not found in DB

    public AssistFrame() {

        setUndecorated(true);

        cmdNotFoundReply = new String[]{"I don't understand what are you saying?", "I am not getting it. Can you tell in different words?"};

        initComponents();
        initActionThread();
        initMicButtionThread();

        listener = new Listener(keybordInput);
        speaker = new Speaker();
        setAlwaysOnTop(true);

        Rectangle scr = GraphicsEnvironment.getLocalGraphicsEnvironment().getMaximumWindowBounds();     //Getting screen resoluction
        Dimension window_size;
        window_size = getSize();
        setLocation(scr.width - window_size.width, scr.height - window_size.height);      //Setting position as per screen resoluction

    }

    void start() {

        micButton.setSelected(true);
        micButtonActionPerformed(null);

        Color c = new Color(5, 2, 10, 190);
        for (int i = 0; i <= c.getAlpha(); i += 11) {
            try {
                Thread.sleep(40);
                setBackground(new Color(c.getRed(), c.getGreen(), c.getBlue(), i));
                repaint();

            } catch (InterruptedException ex) {
                Logger.getLogger(AssistFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        keybordInput = new javax.swing.JTextField();
        replyOutput = new javax.swing.JLabel();
        micButton = new assistent.MicButton();
        closeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(invisible);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });

        keybordInput.setBackground(invisible);
        keybordInput.setFont(new java.awt.Font("Leelawadee UI Semilight", 1, 16)); // NOI18N
        keybordInput.setForeground(new java.awt.Color(158, 74, 206));
        keybordInput.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        keybordInput.setText("jTextField1");
        keybordInput.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        keybordInput.setDisabledTextColor(new java.awt.Color(158, 74, 206));
        keybordInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keybordInputActionPerformed(evt);
            }
        });

        replyOutput.setFont(new java.awt.Font("Leelawadee UI Semilight", 1, 20)); // NOI18N
        replyOutput.setForeground(new java.awt.Color(153, 199, 56));
        replyOutput.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        replyOutput.setText("Test test test");

        micButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                micButtonActionPerformed(evt);
            }
        });

        closeButton.setBackground(invisible);
        closeButton.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 36)); // NOI18N
        closeButton.setForeground(new java.awt.Color(153, 153, 153));
        closeButton.setText("x");
        closeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                closeButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                closeButtonMouseExited(evt);
            }
        });
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(32, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(closeButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(replyOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 476, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(keybordInput, javax.swing.GroupLayout.PREFERRED_SIZE, 408, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(53, 53, 53))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(micButton, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(230, 230, 230))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(replyOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(keybordInput, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(micButton, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void keybordInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keybordInputActionPerformed

        speaker.stopSpeaking();
        micButton.setSelected(false);
        listener.stopListenig();
        //For for synchronisation purpose
        if (!actionThread.isAlive()) {
            initActionThread();
            actionThread.start();
        }

    }//GEN-LAST:event_keybordInputActionPerformed

    /**
     * <p>
     * This method search input of user(input is text in keybordInput
     * (JTextfield) ) for CMD in DB.
     * </p>
     * If input matches to any CMD or proper combination of CMD and Argument
     * from DB then it return randomly selected Reply from matching group of
     * given CMD.
     * <p>
     * If input doesn't matches to any CMD or proper combination of CMD and
     * Argument then it return null.
     * </p>
     * <p>
     * If the input matches to proper combination of CMD and Argument from DB
     * then it will execute action as process in method :
     * Runtime.getRuntime().exec(action);
     * </p>
     */
    private String findCmd() {

        String input = keybordInput.getText().toLowerCase();     //Coverting input to lowear case for 'case insensitive comparison'
        if (!input.equals(""))//
        {

            try {

                String ip_1st_word = input.split(" ", 2)[0];     //Getting first word from input to search in DB
                PreparedStatement ps = DBmanager.getPS("SELECT cmd.data, cmd.group_id , group_.type from cmd join group_ where cmd.data LIKE ? AND cmd.group_id = group_.group_id");
                ps.setString(1, ip_1st_word + "%");
                ps.execute();
                ResultSet cmdList = ps.getResultSet();      //This Result set contain all cmd from DB which matches to first word of input

                while (cmdList.next()) {
                    boolean cmdFound = true;

                    String cmd = cmdList.getString(1).toLowerCase(); //Coverting cmd from DB to lowear case for 'case insensitive comparison'
                    int id = cmdList.getInt(2);
                    int type = cmdList.getInt(3);

                    //Converting cmd and input into char array to comparison
                    char input_char[] = input.toCharArray();
                    char cmd_char[] = cmd.toCharArray();

                    int i = ip_1st_word.length();       //i pointing to index after end of first word from input

                    for (; (i < cmd_char.length) && (i < input_char.length); i++) {
                        if (cmd_char[i] != input_char[i]) {
                            cmdFound = false;
                            break;
                        }
                    }

                    if (cmdFound && (i == cmd_char.length)) //if input contain cmd from DB (Input can completly same to cmd or Input contain cmd plus other words. This other words can be arguments. )
                    {
                        //If input contain arguments then i is now pointing to <sapce> between cmd and argument part of input_char
                        //i is incremented so it will point to first index of argument part in cmd_char
                        i++;

                        if (type == 2) //if cmd has arguments
                        {
                            //Extracting argument part from input
                            String argu = extractArgu(input_char, i);
                            //Fetaching data where argu match to given cmd group
                            ps = DBmanager.getPS("SELECT action FROM arguments WHERE group_id = ? AND argu = ? COLLATE NOCASE;");
                            ps.setInt(1, id);
                            ps.setString(2, argu);
                            ps.execute();
                            ResultSet data = ps.getResultSet();
                            if (data.next()) //if argu match 
                            {
                                String action = data.getString(1);

                                if (!action.equals("")) {
                                    new ProcessBuilder("cmd", "/c", action).start();
                                }

                                String reply = getReply(id).replaceAll("#argu", argu);      //replecement #argu tag by argument
                                return reply;
                            }

                        } else if (cmd_char.length == input_char.length) // If Input has no arguments and it's matches completly to cmd 
                        {

                            String reply = getReply(id);

                            return reply;
                        }
                    } else //cmd not found 
                    {
                        System.err.println("Cmd not found !!");
                    }

                }

            } catch (SQLException ex) {
                Logger.getLogger(AssistFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(AssistFrame.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        return null;        //If proper cmd or cmd with argument not found then it return

    }

    private String extractArgu(char[] arr, int i) {
        if (i >= arr.length) {
            return "";
        } else {
            return new String(arr, i, arr.length - i);
        }

    }

    private String getReply(int id) {
        try {

            PreparedStatement ps = DBmanager.getPS("SELECT data FROM reply WHERE group_id=? ORDER BY RANDOM() LIMIT 1;");
            ps.setInt(1, id);
            ps.execute();
            ResultSet rs = ps.getResultSet();
            if (rs.next()) {
                return rs.getString(1);
            }

        } catch (SQLException ex) {
            Logger.getLogger(AssistFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        return "";
    }

    private void initActionThread() {
        actionThread = new Thread(new Runnable() {
            @Override
            public void run() {

                if (!keybordInput.getText().equals("")) {
                    String reply = findCmd();
                    if (reply == null) {
                        int i = new Random().nextInt(cmdNotFoundReply.length);
                        reply = cmdNotFoundReply[i];
                    }

                    //To use word wrap for displaying reply text in replyOutput, html tags is used
                    replyOutput.setText("<html><div style=\"width:auto;\">" + reply + "</div></html>");
                    speaker.startSpeaking(reply);
                }
            }
        });
    }

    private void initMicButtionThread() {
        micButtionThread = new Thread(new Runnable() {
            @Override
            public void run() {
                keybordInput.setEnabled(false);
                keybordInput.setText("");
                replyOutput.setText("");
                listener.startListening();

                micButton.setSelected(false);
                keybordInputActionPerformed(null);
                keybordInput.setEnabled(true);

            }
        });

    }

    private void micButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_micButtonActionPerformed
        speaker.stopSpeaking();
        if (micButton.isSelected()) //if the recognization is ended
        {
            //only start if previous thread is dead
            if (!micButtionThread.isAlive()) {
                initMicButtionThread();
                micButtionThread.start();

            }

        } else {
            listener.stopListenig();
        }
    }//GEN-LAST:event_micButtonActionPerformed

    private void closeButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeButtonMouseEntered

        closeButton.setForeground(new Color(173, 173, 173));

    }//GEN-LAST:event_closeButtonMouseEntered

    private void closeButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeButtonMouseExited
        closeButton.setForeground(new Color(110, 110, 110));

    }//GEN-LAST:event_closeButtonMouseExited

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed

        System.exit(0);

    }//GEN-LAST:event_closeButtonActionPerformed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
        keybordInput.requestFocus();
    }//GEN-LAST:event_formMouseClicked

    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased

        //       xxx.out.println("Key = "+evt.getKeyCode());
    }//GEN-LAST:event_formKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        if (args.length > 0 && args[0].equalsIgnoreCase("devmode")) //if argument is devmode then start run main of DevMode class
        {
            dev.DevMode.main(null);
        } else //else run assis mode
        {
            /* Set the Nimbus look and feel */
            //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
            /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
             */
            try {
                for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                    if ("Nimbus".equals(info.getName())) {
                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                        break;
                    }
                }
            } catch (ClassNotFoundException ex) {
                java.util.logging.Logger.getLogger(AssistFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (InstantiationException ex) {
                java.util.logging.Logger.getLogger(AssistFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                java.util.logging.Logger.getLogger(AssistFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (javax.swing.UnsupportedLookAndFeelException ex) {
                java.util.logging.Logger.getLogger(AssistFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            }
            //</editor-fold>

            /* Create and display the form */
            AssistFrame af = new AssistFrame();
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    af.setVisible(true);
                }
            });
            af.start();

        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JTextField keybordInput;
    private assistent.MicButton micButton;
    private javax.swing.JLabel replyOutput;
    // End of variables declaration//GEN-END:variables
}
